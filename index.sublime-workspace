{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"text",
				"text-decoration"
			],
			[
				"ba",
				"background-color"
			],
			[
				"pad",
				"padding-top"
			],
			[
				"bac",
				"background"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 10385,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					205,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAyiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"left_delete",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAADKIQAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAATVsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"left_delete",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAABNWwAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAATVsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"left_delete",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAABNWwAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAPCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"left_delete",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAA8JAAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAiTMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"delete_word",
					{
						"forward": false
					},
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAACJMwAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAViUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"left_delete",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAABWJQAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAkSgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/super user/Desktop/FARMAILOS",
		"/C/Users/super user/Desktop/FARMAILOS/files"
	],
	"file_history":
	[
		"/C/Users/super user/Desktop/FARMAILOS/bash",
		"/C/Users/super user/Desktop/FARMAILOS/index.sublime-workspace",
		"/C/Users/super user/Desktop/FARMAILOS/index.html",
		"/C/Users/super user/Desktop/first web cite/style.css",
		"/C/Users/super user/Desktop/first web cite/about.html",
		"/C/Users/super user/Desktop/first web cite/normalize.css",
		"/C/Users/super user/Desktop/first web cite/index.html"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10385,
						"regions":
						{
						},
						"selection":
						[
							[
								10385,
								10385
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5902.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"pinned_build_system": "",
	"project": "index.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 158.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
